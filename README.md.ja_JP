# d2vg

d2vg, A Doc2Vec grep.

Doc2Vecモデルを使って、クエリのフレーズに似た部分を含む文書ファイルを検索します。

* テキストファイル（.txt）、PDFファイル（.pdf）、MS Wordファイル（.docx）からの検索に対応
* 対応言語は日本語、英語（Doc2Vecのモデルは言語に依存するため）
* インデックス化を行うことで性能向上

## インストール

下記の手順はUbuntu 20.04で確認したものです。
Windowsを利用している場合には、[Windowsでのインストール](installation-on-windows.md.ja_JP)を参照してください。

(1) スクリプトや依存を`pip`でインストールします。

```sh
pip3 install git+https://github.com/tos-kamiya/d2vg.git
```

(2) 英語Doc2Vecモデルのファイルをインストールします。

ファイル`enw50k.tar.bz2`をダウンロードして、ディレクトリ`~/.config/d2vg/models/en50k`へと展開します。
（ディレクトリ`~/.config/d2vg/models`が存在しない場合は作成してください。）

```
~/.config/d2vg/models/enw50k
├── en.ref
├── enwiki-w50k-d100.model
└── enwiki-w50k-d100.model.dv.vectors.npy
```

githubのリリースページから`enw50k.tar.bz2.aa`と`enw50k.tar.bz2.ab`をダウンロードしたときは、次のようにして`enw50k.tar.bz2`を作成してください。

```
cat enw50k.tar.bz2.aa enw50k.tar.bz2.ab > enw50k.tar.bz2
```

### 日本語Doc2Vecモデルのインストール

(1) 日本語Doc2Vecモデルをインストールします。

ファイル`jaw50k.tar.bz2`をダウンロードしてディレクトリ`~/.config/d2vg/models/ja50k`へと展開します。
（ディレクトリ`~/.config/d2vg/models`が存在しない場合は作成してください。）

```
~/.config/d2vg/models/jaw50k
├── ja.ref
├── jawiki-w50k-d100.model
└── jawiki-w50k-d100.model.dv.vectors.npy
```

(2) トークナイザーをインストールします。

MeCabとNEologdをインストールします（上記の日本語モデルの作成に利用されたものです）。

```sh
sudo apt install mecab libmecab-dev mecab-ipadic-utf8
git clone --depth 1 https://github.com/neologd/mecab-ipadic-neologd.git
cd mecab-ipadic-neologd
./bin/install-mecab-ipadic-neologd -n -a
sudo cp /etc/mecabrc /usr/local/etc/
```

```
pip3 install mecab
```

## 利用法

```sh
d2vg -v <クエリとなるフレーズ> <ファイル>...
```

英語のドキュメントとして検索する場合には、オプション `-l en` を指定してください:

```sh
d2vg -l en -v <query_phrase> <files>...
```

実行例:  
![Search in pdf files](images/example1.png)

### インデックスを作成して10倍高速化

d2vgにドキュメント（検索対象のファイル）のインデックスを作成させることで、同じドキュメント（の集合）から何度も検索を行う場合に、2回目以降の検索の速度を向上させることができます。

d2vgは以下の条件のときに、インデックスDBを作成して参照します。

* d2vgを実行するときのカレントディレクトリに`.d2vg`というサブディレクトリがある
* 対象のドキュメントが相対パスで指定されている

インデックス化を開始するには、ドキュメントのディレクトリに行って、 `.d2vg` ディレクトリを作成してください。

```sh
cd ドキュメントのディレクトリ
mkdir .d2vg
```

インデックスDBは検索を行う度にインクリメンタルに更新されます。
すなわち、新しいドキュメントが追加されて検索の対象になったタイミングで、そのドキュメントのインデックスを作成しインデックスDBに追加します。

その一方で、削除されたドキュメントのインデックスをデータベースから自動的に削除する機能は無いので、必要に応じて明示的に`.d2vg`ディレクトリを削除してください。

```sh
cd ドキュメントのディレクトリ
rm -rf .d2vg
```

インデックスを有効にしたときの実行例:  
(この例では、インデックス化をしていないときは9分かかっていたものが、25秒に短縮されました。)  
![Search in pdf files](images/example2.png)

## 開発

Doc2Vecモデルの作成の方法については、`making_doc2vec_model/`にある、英語のDoc2Vecモデルを作成したスクリプトを参考にしてください。
添付しているモデルは語彙が5万語、100次元のベクトルでドキュメントを表現するものです。
不足していると感じる場合には、変更したスクリプトを実行することで、より強化したモデルを作成することが可能です。

### Doc2Vecモデルの配布ファイル

Doc2Vecモデルは、Gensim v4で作成されたものとしてください。
`<言語.ref>`というファイル(「言語」はオプション`-l`で指定する言語の名前です)に、Doc2Vecモデルのファイルへの相対パスを記述してください。

例えば、日本語のDoc2Vecモデルの場合には、`ja.ref`というファイルの中身は`jawiki-w50k-d100.model`という行になっています。

```
~/.config/d2vg/models/jaw50k
├── ja.ref
├── jawiki-w50k-d100.model
└── jawiki-w50k-d100.model.dv.vectors.npy
```

## Todo

- [x] ドキュメントファイルのインデックスの導入による最適化
- [x] 最新版のgensim v4と互換性のあるDoc2Vecデータの準備
- [ ] Windowsでインストールできるか確認する
- [ ] キーワード検索の併用
- [ ] 他のモデルの検討(特に、Word2Vecのモデルが利用できないか)
- [ ] より多くの言語サポート

## 謝辞

Doc2Vecモデルの作成には次のサイトを参考にしました。感謝いたします。

* [日本語Wikipediaで学習したdoc2vecモデル](https://yag-ays.github.io/project/pretrained_doc2vec_wikipedia)

## ライセンス

d2vgは [BSD-2](https://opensource.org/licenses/BSD-2-Clause) ライセンスで配布されます。

上記のDoc2Vecモデルについては、配布者のライセンスに従ってください。
